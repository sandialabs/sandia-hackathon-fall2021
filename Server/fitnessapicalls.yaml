swagger: "2.0"
info:
  description: "Sample API calls for App-a-thon 2021: Fitness App edition. These are the calls that should be made to interact with the backend."
  version: "1.0.0"
  title: "Norfolk 2021: Fitness App"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:5000"
basePath: "/api/v1"
tags:
- name: "exercises"
  description: "Choose (or add) activities to do!"
- name: "user"
  description: "Operations about user"
- name: "workout"
  description: "Set up your workouts"
- name: "goal"
  description: "Set some goals to accomplish!"
- name: "ExerciseWorkoutLink"
  description: "confusion junction is what we should have called it"
schemes:
- "https"
- "http"
paths:
  /exercises:
    get:
      tags:
      - "exercises"
      summary: "Find all exercises"
      description: "Returns a single exercise"
      operationId: "getAllExercises"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation will return an array"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Exercise"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
      security:
      - api_key: []
    post:
      tags:
      - "exercises"
      summary: "Add a new exercise to the app"
      description: ""
      operationId: "addExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        "405":
          description: "Invalid input"
      security:
      - exercise_auth:
        - "write:exercise"
        - "read:exercise"
  /exercises/{id}:
    get:
      tags:
      - "exercises"
      summary: "Find an exercise by ID"
      description: "Returns a single exercise"
      operationId: "getExerciseById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of exercise to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Exercise"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
      security:
      - api_key: []
    put:
      tags:
      - "exercises"
      summary: "Update an existing exercise"
      description: ""
      operationId: "updateExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of exercise to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be updated in the database"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
        "405":
          description: "Validation exception"
      security:
      - exercise_auth:
        - "write:exercise"
        - "read:exercise"
    delete:
      tags:
      - "exercises"
      summary: "Deletes an exercise"
      description: ""
      operationId: "deleteExercise"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Exercise id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
      security:
      - exercise_auth:
        - "write:exercise"
        - "read:exercise"
  /workout:
    get:
      tags:
      - "workout"
      summary: "Get all workouts currently saved in the system"
      description: ""
      operationId: "getAllWorkouts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
          "200":
            description: "successful operation will return an array"
            schema:
              type: "array"
              items: 
                $ref: "#/definitions/Workout"
          "404":
            description: "Workouts not found"
      security:
        - api_key: []
    post:
      tags:
      - "workout"
      summary: "Add a new workout to the app"
      description: ""
      operationId: "addWorkout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workout object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/Workout"
      responses:
        "405":
          description: "Invalid input"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
  /workout/{id}:
    get:
      tags:
      - "workout"
      summary: "Find a workout by ID"
      description: "Returns a single workout"
      operationId: "getWorkoutById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of workout to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workout"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Workout not found"
      security:
      - api_key: []
    put:
      tags:
      - "workout"
      summary: "Update an existing workout"
      description: ""
      operationId: "updateWorkout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of workout to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Workout object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Workout"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Workout not found"
        "405":
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
    delete:
      tags:
      - "workout"
      summary: "Deletes a workout"
      description: ""
      operationId: "deleteWorkout"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Workout id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
  /workout/owner/{id}:
    get:
      tags:
      - "workout"
      summary: "Update an existing workout"
      description: ""
      operationId: "getWorkoutsByOwnerId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of who created the workout"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Workouts not found"
        "405":
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
  /goal:
    post:
      tags:
      - "goal"
      summary: "Add a new exercise goal"
      description: ""
      operationId: "addGoal"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Goal object that needs to be added to the app"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      responses:
        "405":
          description: "Invalid input"
      security:
      - goal_auth:
        - "write:goal"
        - "read:goal"
    put:
      tags:
      - "goal"
      summary: "Update an existing goal"
      description: ""
      operationId: "updateGoal"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Goal object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Goal not found"
        "405":
          description: "Validation exception"
      security:
      - goal_auth:
        - "write:goal"
        - "read:goal"
  /goal/{id}:
    get:
      tags:
      - "goal"
      summary: "Find a goal by ID"
      description: "Returns a single Goal"
      operationId: "getGoalById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of goal to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Goal"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Goal not found"
      security:
      - api_key: []
    delete:
      tags:
      - "goal"
      summary: "Deletes a goal"
      description: ""
      operationId: "deleteGoal"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Goal id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Goal not found"
      security:
      - goal_auth:
        - "write:goal"
        - "read:goal"
  /goal/user/{id}:
    get:
      tags:
      - "goal"
      summary: "Get all goals created by current user"
      description: "Returns a list of all goals created by the current user"
      operationId: "getAllGoalsForCurrentUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of who created the workout"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation will return an array"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Goal"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Workouts not found"
        "405":
          description: "Validation exception"
      security:
        - api_key: []

  /link/exercise/{id}:
    get:
      tags:
      - "ExerciseWorkoutLink"
      summary: "Find workouts by an exercise"
      description: "Returns a list of workouts that contain the given exercise"
      operationId: "getWorkoutsByExerciseId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of exercise to look up"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Goal"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Workouts not found"
      security:
      - api_key: []
  /link/workout/{id}:
    get:
      tags:
      - "ExerciseWorkoutLink"
      summary: "Find all goals by workout id"
      description: "Returns a list of goals for the given workout"
      operationId: "getExerciseByWorkoutId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of workout to look up"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Goal"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercises not found"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/LoginPayload"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      deprecated: true
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  exercise_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:exercise: "modify exercises in your account"
      read:exercise: "read your exercises"
  workout_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:workout: "modify workouts in your account"
      read:workout: "read your workouts"
  goal_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:goal: "modify goals in your account"
      read:goal: "read your goals"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Exercise:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "swimming"
      description:
        type: "string"
        description: "a brief summary of the exercise"
      impact:
        type: "string"
        description: "the impact on knees / jumping"
        enum:
        - "low"
        - "medium"
        - "high"
      intensity:
        type: "string"
        description: "how likely are you to sweat"
        enum:
        - "low"
        - "medium"
        - "high"
      category:
        type: "string"
        description: "what kind of exercise is it?"
        enum:
        - "cardio"
        - "flexibility"
        - "strength"
        - "balance"
    xml:
      name: "Exercise"
  Workout:
    type: "object"
    required:
    - "nickname"
    - "ownerId"
    properties:
      id:
        type: "integer"
        format: "int64"
      nickname:
        type: "string"
      ownerId:
        type: "string"
    xml:
      name: "Workout"
  Goal:
    type: "object"
    required:
    - "linkId"
    - "ownerId"
    properties:
      id:
        type: "integer"
        format: "int64"
      linkId:
        type: "integer"
        format: "int64" 
      ownerId:
        type: "integer"
        format: "int64"  
      num_sets:
        type: "integer"
        format: "int64"
      num_reps:
        type: "integer"
        format: "int64"
      duration:
        type: "string"
      weight:
        type: "integer"
        format: "int64"
    xml:
      name: "ExerciseGoal"
  ExerciseWorkoutLink:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      exerciseId:
        type: "integer"
        format: "int64"  
      workoutId:
        type: "integer"
        format: "int64"
    xml:
      name: "ExerciseWorkoutLink"
  User:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "active, inactive, disabled"
    xml:
      name: "User"
  GoalPayload:
    type: "object"
    required:
      - "exerciseId"
      - "workoutId"
      - "ownerId"
    properties:
      exerciseId:
        type: "integer"
        format: "int64"  
      workoutId:
        type: "integer"
        format: "int64"
      ownerId:
        type: "integer"
        format: "int64"  
      num_sets:
        type: "integer"
        format: "int64"
      num_reps:
        type: "integer"
        format: "int64"
      duration:
        type: "string"
      weight:
        type: "integer"
        format: "int64"
    xml:
      name: "GoalPayload"
  
  LoginPayload:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
